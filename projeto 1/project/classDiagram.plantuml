@startuml

class User {
    -{static} counter: int
    -id: int
    -name: String
    -email: String
    -password: String
    +getId(): int
    +getName(): String
    +setName(name: String): void
    +getEmail(): String
    +setEmail(email: String): void
    +getPassword(): String
    +login(password: String): boolean
    +changePassword(oldPass: String, newPass: String): void
}
class Student {
    -enrollment: Enrollment[]
    +enroll(registry: Registry): void
    +unenroll(registry: Registry): void
    +getEnrollment(): Enrollment[]
}
class Professor {
    +getSubject(): Subject[]
    +getSubjectStudents(subject: Subject): Student[]
    +getRegistries(): Registry[]
    +addRegistry(registry: Registry): void
    +removeRegistry(registry: Registry): void
}
class Secretary {
    +allocateProfessor(registry: Registry, professor: Professor): void
    +dellocateProfessor(registry: Registry, professor: Professor): void
    +createCourse(course: Course): void
    +deleteCourse(course: Course): void
    +createSubject(course: Course): void
    +deleteSubject(course: Course): void
    +updateSubjectStatus(subject: Subject, status: Status): void
    +generateCurriculum(semester: Semester): void
}
class Enrollment {
    -{static} counter: int
    -id: int
    -semester: int
    -course: Course
    -registries: Registry[]
    +getId(): int
    +getSemester(): int
    +setSemester(semester: int): void
    +getStudent(): Student
    +setStudent(student: Student): void
    +getCourse(): Course
    +setCourse(course: Course): void
    +getRegistries(): Registry[]
    +addRegistry(registry: Registry): void
    +removeRegistry(registry: Registry): void
}
class Course {
    -{static} counter: int
    -id: int
    -name: String
    -token: int
    -semesters: Semester[]
    +getId(): int
    +getName(): String
    +setName(name: String): void
    +getToken(): int
    +setToken(token: int): void
    +getSemesters(): Semester[]
    +addSemester(semester: Semester): void
    +removeSemester(semester: Semester): void
}
class Semester {
    -{static} counter: int
    -id: int
    -period: int
    -curriculum: Curriculum
    +getId(): int
    +setId(id: int): void
    +getPeriod(): int
    +setPeriod(period: int): void
    +getCurriculum(): Curriculum
    +setCurriculum(curriculum: Curriculum): void
}
class Curriculum {
    -{static} counter: int
    -id: int
    -name: String
    -registries: Registry[]
    +getId(): int
    +getName(): String
    +setName(name: String): void
    +getRegistries(): Registry[]
    +addRegistry(registry: Registry): void
    +removeRegistry(registry: Registry): void
}
class Subject {
    -{static} counter: int
    -id: int
    -name: String
    -hours: int
    -token: int
    +getId(): int
    +getName(): String
    +setName(name: String): void
    +getHours(): int
    +setHours(hours: int): void
    +getToken(): int
    +setToken(token: int): void
}
class Registry {
    -{static} counter: int
    -id: int
    -required: boolean
    -status: Status
    -subject: Subject
    -professors: Professor[]
    +getId(): int
    +setId(id: int): void
    +isRequired(): boolean
    +setRequired(required: boolean): void
    +getStatus(): Status
    +setStatus(status: Status): void
    +getSubject(): Subject
    +setSubject(subject: Subject): void
    +getEnrollment(): Enrollment[]
    +getProfessors(): Professor[]
    +addProfessor(professor: Professor): void
    +removeProfessor(professor: Professor): void
    +addEnrollment(enrollment: Enrollment): void
    +removeEnrollment(enrollment: Enrollment): void
    +updateStatus(status: Status): void
}

enum Status {
    AVAILABLE
    CANCELED
    FULL
}

User <|-- Student
User <|-- Professor
User <|-- Secretary

Course "1" -- "1..*" Semester
Semester "1" -- "1" Curriculum
Curriculum "1" -- "1..*" Registry
Registry "0..*" -- "1" Subject
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment
Registry "0..*" -- "4..*" Enrollment
Registry "0..*" -- "1..*" Professor

@enduml